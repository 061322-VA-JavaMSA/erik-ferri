package com.revature.daos;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
//import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.revature.models.Customer;
import com.revature.util.ConnectionUtil;

public class CustomerPostgres implements CustomerDAO {

	@Override
	public Customer createCustomer(Customer cu) {
		String sql = "insert into customers (username, password) values (?,?) returning id;";
		try(Connection c = ConnectionUtil.getConnectionFromFile()){
			PreparedStatement ps = c.prepareStatement(sql);
			ps.setString(1, cu.getUsername());
			ps.setString(2, cu.getPassword());
			
			ResultSet rs = ps.executeQuery(); // return the id generated by the database
			if(rs.next()) {
				cu.setId(rs.getInt("id"));
			}
			
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return cu;
	}

	@Override
	public Customer retrieveCustomerById(int id) {
		String sql = "select * from customers where id = ?;";
		Customer customer = null;
		
		try(Connection c = ConnectionUtil.getConnectionFromFile()){
			PreparedStatement ps = c.prepareStatement(sql);
			
			ps.setInt(1, id); // this refers to the 1st ? in the sql String
			
			ResultSet rs = ps.executeQuery();
			
			if(rs.next()) {
				customer = new Customer();
				customer.setId(rs.getInt("id"));
				customer.setUsername(rs.getString("username"));
				customer.setPassword(rs.getString("password"));
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return customer;
	}

	@Override
	public List<Customer> retrieveCustomers() {
		String sql = "select * from customer;";
		List<Customer> customers = new ArrayList<>();
		
		try(Connection c = ConnectionUtil.getConnectionFromFile()){
			// no user input taken, no need for prepared statement
			Statement s = c.createStatement();
			ResultSet rs = s.executeQuery(sql);
			
			while(rs.next()) {
				// extract each field from rs for each record, map them to a User object and add them to the users arrayliost
				Customer cu = new Customer();
				cu.setId(rs.getInt("id"));
				cu.setUsername(rs.getString("username"));
				cu.setPassword(rs.getString("password"));
				
				customers.add(cu);
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return customers;
	}

	@Override
	public Customer retrieveCustomerByUsername(String username) {
		String sql = "select * from customers where username  = ?;";
		Customer cu = null;
		
		try (Connection c = ConnectionUtil.getConnectionFromFile();){
			PreparedStatement ps = c.prepareStatement(sql);
			
			ps.setString(1, username); // this refers to the 1st "?" in the sql string, allows to inject data

			ResultSet rs = ps.executeQuery();
			
			while(rs.next()) {
				cu = new Customer();
				cu.setId(rs.getInt("id"));
				cu.setUsername(rs.getString("username"));
				cu.setPassword(rs.getString("password"));
			}
			
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return cu;
	}

	@Override
	public boolean updateCustomer(Customer cu) {
		String sql = "update customers set username = ?, password = ? where id = ?;";
		int rowsChanged = -1;
		
		try(Connection c = ConnectionUtil.getConnectionFromFile()){
			PreparedStatement ps = c.prepareStatement(sql);
			
			ps.setString(1, cu.getUsername());
			ps.setString(2, cu.getPassword());
			ps.setInt(3, cu.getId());
			
			rowsChanged = ps.executeUpdate();
			
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		if(rowsChanged < 1) {
			return false;
		}
		return true;
	}

	@Override
	public boolean deleteCustomerById(int id) {
		String sql = "delete from customers where id = ?;";
		int rowsChanged = -1;
		try(Connection c = ConnectionUtil.getConnectionFromFile()){
			PreparedStatement ps = c.prepareStatement(sql);
			
			ps.setInt(1, id);
			
			rowsChanged = ps.executeUpdate();
			
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		if(rowsChanged < 1) {
			return false;
		}
		return true;
	}

}