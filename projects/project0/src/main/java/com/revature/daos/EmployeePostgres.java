package com.revature.daos;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
//import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.revature.models.Employee;
import com.revature.util.ConnectionUtil;

public class EmployeePostgres implements EmployeeDAO{

	@Override
	public Employee createEmployee(Employee em) {
		String sql = "insert into employees (username, password) values (?,?) returning id;";
		try(Connection c = ConnectionUtil.getConnectionFromFile()){
			PreparedStatement ps = c.prepareStatement(sql);
			ps.setString(1, em.getUsername());
			ps.setString(2, em.getPassword());
			
			ResultSet rs = ps.executeQuery(); // return the id generated by the database
			if(rs.next()) {
				em.setId(rs.getInt("id"));
			}
			
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return em;
	}

	@Override
	public Employee retrieveEmployeeById(int id) {
		String sql = "select * from employees where id = ?;";
		Employee employee = null;
		
		try(Connection c = ConnectionUtil.getConnectionFromFile()){
			PreparedStatement ps = c.prepareStatement(sql);
			
			ps.setInt(1, id); // this refers to the 1st ? in the sql String
			
			ResultSet rs = ps.executeQuery();
			
			if(rs.next()) {
				employee = new Employee();
				employee.setId(rs.getInt("id"));
				employee.setUsername(rs.getString("username"));
				employee.setPassword(rs.getString("password"));
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return employee;
	}

	@Override
	public List<Employee> retrieveEmployees() {
		String sql = "select * from employee;";
		List<Employee> employees = new ArrayList<>();
		
		try(Connection c = ConnectionUtil.getConnectionFromFile()){
			// no user input taken, no need for prepared statement
			Statement s = c.createStatement();
			ResultSet rs = s.executeQuery(sql);
			
			while(rs.next()) {
				// extract each field from rs for each record, map them to a User object and add them to the users arrayliost
				Employee em = new Employee();
				em.setId(rs.getInt("id"));
				em.setUsername(rs.getString("username"));
				em.setPassword(rs.getString("password"));
				
				employees.add(em);
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return employees;
	}

	@Override
	public Employee retrieveEmployeeByUsername(String username) {
		String sql = "select * from employees where username  = ?;";
		Employee em = null;
		
		try (Connection c = ConnectionUtil.getConnectionFromFile();){
			PreparedStatement ps = c.prepareStatement(sql);
			
			ps.setString(1, username); // this refers to the 1st "?" in the sql string, allows to inject data

			ResultSet rs = ps.executeQuery();
			
			while(rs.next()) {
				em = new Employee();
				em.setId(rs.getInt("id"));
				em.setUsername(rs.getString("username"));
				em.setPassword(rs.getString("password"));
			}
			
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return em;
	}

	@Override
	public boolean updateEmployee(Employee em) {
		String sql = "update employees set username = ?, password = ? where id = ?;";
		int rowsChanged = -1;
		
		try(Connection c = ConnectionUtil.getConnectionFromFile()){
			PreparedStatement ps = c.prepareStatement(sql);
			
			ps.setString(1, em.getUsername());
			ps.setString(2, em.getPassword());
			ps.setInt(3, em.getId());
			
			rowsChanged = ps.executeUpdate();
			
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		if(rowsChanged < 1) {
			return false;
		}
		return true;
	}

	@Override
	public boolean deleteEmployeeById(int id) {
		String sql = "delete from employees where id = ?;";
		int rowsChanged = -1;
		try(Connection c = ConnectionUtil.getConnectionFromFile()){
			PreparedStatement ps = c.prepareStatement(sql);
			
			ps.setInt(1, id);
			
			rowsChanged = ps.executeUpdate();
			
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		if(rowsChanged < 1) {
			return false;
		}
		return true;
	}

}